{"ast":null,"code":"import Web3 from 'web3';\nimport DigitalArtContract from './abi/DigitalArt.json';\n/**\n * @App Build Decentralized Art Market using ERC-721\n * @Util class for web3 and contract instance\n * @Book Learn Ethereum \n * @author brian wu\n */\n\nexport const getWeb3 = () => new Promise((resolve, reject) => {\n  window.addEventListener(\"load\", async () => {\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        await window.ethereum.enable();\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } else if (window.web3) {\n      // load metamask provider\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } else {\n      console.log(process.env.PUBLIC_URL);\n      const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\");\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n});\nexport const getInstance = async web3 => {\n  const networkId = await web3.eth.net.getId();\n  window.user = (await web3.eth.getAccounts())[0];\n  const deployedNetwork = DigitalArtContract.networks[networkId];\n  window.instance = new web3.eth.Contract(DigitalArtContract.abi, deployedNetwork && deployedNetwork.address, {\n    from: window.user\n  });\n  return window.instance;\n};","map":{"version":3,"sources":["/home/shkwon/Projects/Learn_Ethereum/chapter10/DigitalArtERC721Token/dapp/src/Web3Util.js"],"names":["Web3","DigitalArtContract","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","error","console","log","process","env","PUBLIC_URL","provider","providers","HttpProvider","getInstance","networkId","eth","net","getId","user","getAccounts","deployedNetwork","networks","instance","Contract","abi","address","from"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,kBAAP,MAA+B,uBAA/B;AACA;;;;;;;AAMA,OAAO,MAAMC,OAAO,GAAG,MACnB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7BC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AACxC,QAAID,MAAM,CAACE,QAAX,EAAqB;AACjB,YAAMC,IAAI,GAAG,IAAIT,IAAJ,CAASM,MAAM,CAACE,QAAhB,CAAb;;AACA,UAAI;AACA,cAAMF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EAAN;AACAN,QAAAA,OAAO,CAACK,IAAD,CAAP;AACH,OAHD,CAGE,OAAOE,KAAP,EAAc;AACZN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACH;AACJ,KARD,MAQO,IAAIL,MAAM,CAACG,IAAX,EAAiB;AACpB;AACA,YAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAT,MAAAA,OAAO,CAACK,IAAD,CAAP;AACH,KALM,MAKA;AACHG,MAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,UAAxB;AACA,YAAMC,QAAQ,GAAG,IAAIjB,IAAI,CAACkB,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CAAjB;AACA,YAAMV,IAAI,GAAG,IAAIT,IAAJ,CAASiB,QAAT,CAAb;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAT,MAAAA,OAAO,CAACK,IAAD,CAAP;AACH;AACJ,GArBD;AAsBH,CAvBD,CADG;AA0BP,OAAO,MAAMW,WAAW,GAAG,MAAOX,IAAP,IAAgB;AACvC,QAAMY,SAAS,GAAG,MAAMZ,IAAI,CAACa,GAAL,CAASC,GAAT,CAAaC,KAAb,EAAxB;AACAlB,EAAAA,MAAM,CAACmB,IAAP,GAAc,CAAC,MAAMhB,IAAI,CAACa,GAAL,CAASI,WAAT,EAAP,EAA+B,CAA/B,CAAd;AACA,QAAMC,eAAe,GAAG1B,kBAAkB,CAAC2B,QAAnB,CAA4BP,SAA5B,CAAxB;AACAf,EAAAA,MAAM,CAACuB,QAAP,GAAkB,IAAIpB,IAAI,CAACa,GAAL,CAASQ,QAAb,CACd7B,kBAAkB,CAAC8B,GADL,EAEdJ,eAAe,IAAIA,eAAe,CAACK,OAFrB,EAGd;AACIC,IAAAA,IAAI,EAAE3B,MAAM,CAACmB;AADjB,GAHc,CAAlB;AAOA,SAAOnB,MAAM,CAACuB,QAAd;AACH,CAZM","sourcesContent":["import Web3 from 'web3';\nimport DigitalArtContract from './abi/DigitalArt.json'\n/**\n * @App Build Decentralized Art Market using ERC-721\n * @Util class for web3 and contract instance\n * @Book Learn Ethereum \n * @author brian wu\n */\nexport const getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        window.addEventListener(\"load\", async () => {\n            if (window.ethereum) {\n                const web3 = new Web3(window.ethereum);\n                try {\n                    await window.ethereum.enable();\n                    resolve(web3);\n                } catch (error) {\n                    reject(error);\n                }\n            } else if (window.web3) {\n                // load metamask provider\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            } else {\n                console.log(process.env.PUBLIC_URL)\n                const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\");\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });\n\nexport const getInstance = async (web3) => {\n    const networkId = await web3.eth.net.getId();\n    window.user = (await web3.eth.getAccounts())[0];\n    const deployedNetwork = DigitalArtContract.networks[networkId];\n    window.instance = new web3.eth.Contract(\n        DigitalArtContract.abi,\n        deployedNetwork && deployedNetwork.address,\n        {\n            from: window.user\n        }\n    );\n    return window.instance;\n}"]},"metadata":{},"sourceType":"module"}